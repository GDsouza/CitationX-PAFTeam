###
# See: http://wiki.flightgear.org/MapStructure
# Class things:
var name = 'VOR_cit';
var parents = [DotSym];
var __self__ = caller(0)[0];
DotSym.makeinstance( name, __self__ );

SymbolLayer.get(name).df_style = { # style to use by default
	line_width: 3,
	range_line_width: 3,
	radial_line_width: 3,
	range_dash_array: [5, 15, 5, 15, 5],
	radial_dash_array: [15, 5, 15, 5, 15],
	scale_factor: 1,
	active_color: [0.9, 0.9, 0],
	inactive_color: [0.1, 0.9, 0],
};

var element_type = "group"; # we want a group, becomes "me.element"
var icon_vor = nil;  # a handle to the cached icon
var range_vor = nil; # two elements that get drawn when needed
var radial_vor = nil; # if one is nil, the other has to be nil
var text_vor = nil;
var active = -1;

var drawVOR = func(group) {
	group.createChild("path")
		.moveTo(-15,0)
		.lineTo(-7.5,12.5)
		.lineTo(7.5,12.5)
		.lineTo(15,0)
		.lineTo(7.5,-12.5)
		.lineTo(-7.5,-12.5)
		.close()
		.setStrokeLineWidth(line_width)
		.setColor(color)
		.set("z-index",-2);
};

var cache = StyleableCacheable.new(
	name:name, draw_func: drawVOR,
	cache: SymbolCache32x32,
	draw_mode: SymbolCache.DRAW_CENTERED,
	relevant_keys: ["line_width", "color"],
);

var controller_check = func(layer, controller, arg...) {
	var ret = call(compile("call(layer.controller."~controller~", arg, layer.controller)", "<test>"), arg, var err=[]);
	if (size(err))
		if (err[0] == "No such member: "~controller)
			print("MapStructure Warning: Required controller not found: ", name, ":", controller);
		else die(err[0]); # rethrow

	return ret; # nil if not found
}

	var get_course_by_freq = func(freq) {
		if (freq == getprop("instrumentation/nav[0]/frequencies/selected-mhz"))
			return getprop("instrumentation/nav[0]/radials/selected-deg");
		else
			return getprop("instrumentation/nav[1]/radials/selected-deg");
	}

var draw = func {
  if(me.text_vor == nil){
    var text_offset = me.getStyle('text_offset', [25,10]);
    var text_color = me.getStyle('text_color', [1,1,1]);
		var text_scale = me.getStyle('text_scale',2);
    me.text_vor = me.element.createChild("text")
    .setDrawMode( canvas.Text.TEXT )
    .setText(me.model.id)
    .setFont("LiberationFonts/LiberationSans-Bold.ttf")
    .setFontSize(28)
    .setColor(text_color)
    .setTranslation(text_offset)
		.setScale(text_scale);
	}  

	var active = controller_check(me.layer, 'isActive', me.model);
	if (active != me.active) {
		if (me.icon_vor != nil) me.icon_vor.del();
		me.style.color = active ? me.style.active_color : me.style.inactive_color;
		me.text_vor.setColor(active ? me.style.active_color : me.style.inactive_color);
		me.icon_vor = cache.render(me.element, me.style).setScale(me.style.scale_factor);
		me.active = active; # update me.active flag
	}
	
  var rangeNm = me.map.getRange();
	if (active) {
    var course = get_course_by_freq(me.model.frequency/100)-getprop("/orientation/heading-magnetic-deg");	
			# initialize me.range and me.radial_vor
			var rangeNm = me.map.getRange();
			var radius = (me.model.range_nm/rangeNm)*128; # old 60
		if (me.range_vor == nil) redraw(me,radius);
    else {me.range_vor.del();me.radial_vor.del();redraw(me,radius)}
		me.radial_vor.setRotation(course*D2R);
		me.range_vor.show();
		me.radial_vor.show();
	} else { # inactive station (not tuned)
			if (me.range_vor != nil) {
				me.range_vor.del();
				me.radial_vor.del();
			}
	}
};

var redraw = func(me,radius) {
		me.range_vor = me.element.createChild("path")
			.moveTo(-radius,0)
			.arcSmallCW(radius,radius,0,2*radius,0)
			.arcSmallCW(radius,radius,0,-2*radius,0)
			.setStrokeLineWidth(me.style.range_line_width)
			.setStrokeDashArray(me.style.range_dash_array)
			.setColor(me.style.active_color)
			.set("z-index",-2);
		
		me.radial_vor = me.element.createChild("path")
			.moveTo(0,-radius)
			.vert(2*radius)
			.setStrokeLineWidth(me.style.radial_line_width)
			.setStrokeDashArray(me.style.radial_dash_array)
			.setColor(me.style.active_color)
			.set("z-index",-2);
};
